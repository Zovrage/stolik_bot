from aiogram import Router
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from uuid import uuid4

from database.crud import get_user_bookings

router = Router()


@router.inline_query()
async def inline_bookings(query: InlineQuery):
    user_id = query.from_user.id
    bookings = get_user_bookings(user_id)

    results = []

    if not bookings:
        results.append(
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π",
                input_message_content=InputTextMessageContent(
                    message_text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
                )
            )
        )
    else:
        for b in bookings:
            booking_text = (
                f"üçΩ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                f"üìÖ –î–∞—Ç–∞: {b[2]}\n"
                f"üïí –í—Ä–µ–º—è: {b[3]}\n"
                f"üë• –ì–æ—Å—Ç–µ–π: {b[4]}\n"
                f"üí¨ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {b[5]}\n"
                f"{'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if b[6] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}"
            )

            results.append(
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=f"{b[2]} {b[3]} | {b[4]} —á–µ–ª.",
                    input_message_content=InputTextMessageContent(
                        message_text=booking_text
                    )
                )
            )

    await query.answer(results, cache_time=1)

