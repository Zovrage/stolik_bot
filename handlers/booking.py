from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime

from state.booking_state import BookingState
from database.crud import add_booking
from keyboards.reply import time_keyboard, guests_keyboard, preferences_keyboard
from keyboards.inline import payment_keyboard

router = Router()


@router.message(F.text == '/book')
async def start_booking(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì):')
    await state.set_state(BookingState.date)


@router.message(BookingState.date)
async def get_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%Y-%m-%d").date()
        if date_obj < datetime.today().date():
            raise ValueError('–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º')
    except ValueError:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –∏ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º.')
        return

    await state.update_data(date=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', reply_markup=time_keyboard())
    await state.set_state(BookingState.time)


@router.message(BookingState.time)
async def get_time(message: Message, state: FSMContext):
    allowed_times = {'18:00', '19:00', '20:00', '21:00'}
    if message.text not in allowed_times:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return

    await state.update_data(time=message.text)
    await message.answer('–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?', reply_markup=guests_keyboard())
    await state.set_state(BookingState.guests)


@router.message(BookingState.guests)
async def get_guests(message: Message, state: FSMContext):
    try:
        guests = int(message.text.replace('+', ''))
        if guests < 1 or guests > 20:
            raise ValueError()
    except ValueError:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (–æ—Ç 1 –¥–æ 20).')
        return

    await state.update_data(guests=message.text)
    await message.answer('–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é?', reply_markup=preferences_keyboard())
    await state.set_state(BookingState.preferences)


@router.message(BookingState.preferences)
async def get_preferences(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    date = data['date']
    time = data['time']
    guests = data['guests']
    preferences = message.text

    add_booking(user_id, date, time, guests, preferences)
    await state.clear()

    await message.answer(
        f'‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:\nüìÖ {date}\nüïí {time}\nüë• {guests}\nüí¨ {preferences}\n\n'
        f'–ï—Å–ª–∏ –¥–ª—è –±—Ä–æ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        reply_markup=payment_keyboard()
    )
