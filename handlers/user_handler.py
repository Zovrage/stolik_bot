from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command

from database.crud import get_user_bookings, cancel_booking
from state.booking_state import BookingState



router = Router()




@router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.\n'
        '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        '/book ‚Äî –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫\n'
        '/mybookings ‚Äî –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n'
        '/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )


@router.message(Command('mybookings'))
async def my_bookings(message: Message):
    bookings = get_user_bookings(message.from_user.id)

    if not bookings:
        await message.answer('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.')
        return

    text = 'üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n'
    for b in bookings:
        status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if b[6] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
        text += (
            f'üÜî ID: {b[0]}\n'
            f'üìÖ {b[2]} ‚è∞ {b[3]} üë• {b[4]}\n'
            f'üí¨ {b[5]}\n'
            f'{status}\n\n'
        )

    await message.answer(text)


@router.message(Command('cancel'))
async def cancel(message: Message):
    bookings = get_user_bookings(message.from_user.id)

    if not bookings:
        await message.answer('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.')
        return

    text = '–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å. –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n'
    for b in bookings:
        text += f"üÜî {b[0]} | üìÖ {b[2]} ‚è∞ {b[3]} üë• {b[4]}\n"

    await message.answer(text)
    await BookingState.cancel.set()


@router.message(F.text == '/mybookings')
async def my_bookings_cmd(message: Message):
    bookings = get_user_bookings(message.from_user.id)
    if not bookings:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.')
    else:
        response = '–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n'
        for b in bookings:
            response += f'üìÖ {b[2]} üïí {b[3]} üë• {b[4]} üí¨ {b[5]} {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if b[6] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n'
        await message.answer(response)


@router.message(F.text == '/cancel')
async def cancel_cmd(message: Message, state: FSMContext):
    cancel_booking(message.from_user.id)
    await state.clear()
    await message.answer('–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')



